version: '3.8'

services:

  # üü© Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafkademo
    image: kafkademo
    ports:
      - "9191:8080"  # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç
    depends_on:
      db:
        condition: service_healthy  # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
#      kafka:
#        condition: service_healthy  # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Kafka
    environment:
      DATABASE_URL: postgresql://db:5432/user_service_postgres
      DATABASE_USERNAME: user
      DATABASE_PASSWORD: 1234
      SPRING_PROFILES_ACTIVE: docker

#      —É—Å—Ç–∞—Ä–µ–ª–æ:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/user_service_postgres
#      SPRING_PROFILES_ACTIVE: docker
#      SPRING_DATASOURCE_USERNAME: user
#      SPRING_DATASOURCE_PASSWORD: 1234

      KAFKA_BOOTSTRAP_SERVERS: kafka:9092

#      JAVA_OPTS: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=75"  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏
    healthcheck:  # –î–æ–±–∞–≤–ª—è–µ–º healthcheck –¥–ª—è Spring Boot Actuator
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s



  # üü¶ PostgreSQL
  db:
    image: postgres:16.0-alpine  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–ª–µ–≥—á–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      # –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –¥–ª—è Spring Boot:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/user_service_postgres
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_PROFILES_ACTIVE: docker
#      POSTGRES_DB: user_service_postgres

      POSTGRES_USER: user
      POSTGRES_PASSWORD: 1234
      POSTGRES_DB: user_service_postgres

    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:  # Healthcheck –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
      test: ["CMD-SHELL", "pg_isready -U user -d user_service_postgres"]
      interval: 5s
      timeout: 5s
      retries: 10



  # üü® Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    ports:
      - "22181:2181"  # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç 22181 –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ 2181
#    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
#    healthcheck:  # Healthcheck –¥–ª—è Zookeeper
#      # "echo ruok" ‚Üí send to port 2181 ‚Üí expect "imok"
#      test: [ "CMD-SHELL", "echo ruok | nc -w 5 localhost 2181 | grep imok" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5



  # üüß Kafka
  kafka: # —ç—Ç–æ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä–æ–µ Docker DNS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–∫ hostname –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ç–∏.
    image: confluentinc/cp-kafka:7.2.1
#    container_name: kafka
    ports:
      - "9092:9092"    # –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏ Docker
      - "29092:29092"  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å —Ö–æ—Å—Ç–∞, –∏–∑–≤–Ω–µ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
    depends_on:
      - zookeeper # —ç—Ç—É —Å–µ–∫—Ü–∏—é –¥–æ–±–∞–≤–∏–ª –≤–º–µ—Å—Ç–æ 2-—ç –Ω–∏–∂–µ –ø—Ä–∏—ã–µ–¥–µ–Ω–Ω—ã—Ö
#      zookeeper:
#        condition: service_healthy  # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏—Å—Ç–µ–Ω–µ—Ä—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # PLAINTEXT://kafka:9092 ‚Üí –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥—Ä—É–≥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, kafka-ui –∏ app) –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ Kafka.
#      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092 # KAFKA_LISTENERS –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã Kafka —Å–ª—É—à–∞–ª –Ω–∞ 0.0.0.0, –∏–Ω–∞—á–µ –æ–Ω –º–æ–∂–µ—Ç —Å–ª—É—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏)
      KAFKA_LOG4J_ROOT_LOGLEVEL: "INFO"  # –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è production

      # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É (–ø–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é):
      KAFKA_CFG_AUTO_LEADER_REBALANCE_ENABLE: "false"

    healthcheck:  # Healthcheck –¥–ª—è Kafka
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5




  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "9081:8080"  # UI –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8081
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092


volumes:
  pgdata:  # –¢–æ–º –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö PostgreSQL

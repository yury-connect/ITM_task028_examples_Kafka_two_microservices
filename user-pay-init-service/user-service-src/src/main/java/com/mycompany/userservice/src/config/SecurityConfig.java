package com.mycompany.userservice.src.config;

import com.mycompany.userservice.src.config.security.CustomAccessDeniedHandler;
import com.mycompany.userservice.src.config.security.CustomAuthenticationEntryPoint;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http,
                                                   CustomAuthenticationEntryPoint authenticationEntryPoint,
                                                   CustomAccessDeniedHandler accessDeniedHandler
    ) throws Exception {
        http
                .csrf().disable() // –æ—Ç–∫–ª—é—á–∞–µ–º CSRF –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤.exceptionHandling()
                .exceptionHandling()
                    .authenticationEntryPoint(authenticationEntryPoint)  // üëà –æ–±—Ä–∞–±–æ—Ç–∫–∞ 401
                .accessDeniedHandler(accessDeniedHandler)  // üëà –æ–±—Ä–∞–±–æ—Ç–∫–∞ 403
                .and()
                .authorizeHttpRequests(authz -> authz
                        .anyRequest().authenticated()
                )
                .httpBasic(); // –≤–∫–ª—é—á–∞–µ–º –±–∞–∑–æ–≤—É—é HTTP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é

        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏ (–ª–æ–≥–∏–Ω: user, –ø–∞—Ä–æ–ª—å: 1234)
        return new InMemoryUserDetailsManager(
                User.withUsername("user")
                        .password("1234")
                        .roles("USER")
                        .build()
        );
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        // NoOp ‚Äî –ø–∞—Ä–æ–ª–∏ –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞)
        return NoOpPasswordEncoder.getInstance();
    }
}
